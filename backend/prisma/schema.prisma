// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// TODO: store user details such as name, avatar url
model User {
  id                    Int       @id @default(autoincrement())
  github_username       String    @unique
  account_addr          String    @unique
  name                  String?
  avatar_url            String?

  bounties_won          Bounty[]  @relation("WonByUser")
  bonties_created       Bounty[]  @relation("CreatedByUser")
  bounties_attempted    Attempt[]

  transactions_sent     Transaction[] @relation("sendByUser")
  transactions_received Transaction[] @relation("receivedByUser")

  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
}

model Bounty {
  id                    Int       @id @default(autoincrement())

  issue_url             String    @unique
  issue_owner           String
  issue_repo            String
  issue_title           String
  issue_number          Int

  amount                Int
  token                 String

  created_by            User      @relation("CreatedByUser", fields: [created_by_id], references: [id])
  created_by_id         Int

  attempts              Attempt[]

  won_by                User?      @relation("WonByUser", fields: [won_by_id], references: [id])
  won_by_id             Int?

  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
}

model Attempt {
  id                    Int       @id @default(autoincrement())

  bounty                Bounty    @relation(fields: [bounty_id], references: [id])
  bounty_id             Int

  user                  User      @relation(fields: [user_id], references: [id])
  user_id               Int

  status                AttemptStatus

  signature             String

  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
}

// TODO: store pr details such as title, number, organisation avatar url 
model Transaction {
  id                    Int       @id @default(autoincrement())

  from                  User      @relation("sendByUser", fields: [from_id], references: [id])
  from_id               Int

  to                    User      @relation("receivedByUser", fields: [to_id], references: [id])
  to_id                 Int

  amount                String
  token                 String

  signature             String    @unique
  pr_url                String
  pr_title              String?
  pr_number             Int?
  org_avatar_url        String?

  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
}